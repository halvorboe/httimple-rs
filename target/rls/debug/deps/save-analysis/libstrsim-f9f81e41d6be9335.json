{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"strsim","disambiguator":[2598880202885588559,171201087995246614]},"crate_root":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src","external_crates":[{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[2941988461341877381,8472300390439693338]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2153668756788574171,2288043478962111168]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src/lib.rs","num":3,"id":{"name":"alloc","disambiguator":[2071417312717755849,11492198267815760392]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src/lib.rs","num":4,"id":{"name":"std_unicode","disambiguator":[2740323154819872826,1657005047258143774]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[10186673904286688438,2605771987977486664]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[531320120293637297,3994205924220671556]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14853310604380091786,6829468329683660009]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src/lib.rs","num":8,"id":{"name":"compiler_builtins","disambiguator":[9639871989543458626,12742274598358072568]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src/lib.rs","num":9,"id":{"name":"alloc_jemalloc","disambiguator":[2885253331875378562,10684362770611127168]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[4215349770068598000,17955886968259767776]}}],"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":25912,"line_start":1,"line_end":910,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":25912,"line_start":1,"line_end":910,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/strsim-0.6.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":14},{"krate":0,"index":40},{"krate":0,"index":46},{"krate":0,"index":42},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38}],"decl_id":null,"docs":" This library implements string similarity metrics.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":31},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":184,"byte_end":203,"line_start":9,"line_end":9,"column_start":5,"column_end":24},"name":"DifferentLengthArgs","qualname":"::StrSimError::DifferentLengthArgs","value":"StrSimError::DifferentLengthArgs","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":166,"byte_end":177,"line_start":8,"line_end":8,"column_start":10,"column_end":21},"name":"StrSimError","qualname":"::StrSimError","value":"StrSimError::{DifferentLengthArgs}","parent":null,"children":[{"krate":0,"index":31}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":16},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":216,"byte_end":229,"line_start":12,"line_end":12,"column_start":10,"column_end":23},"name":"HammingResult","qualname":"::HammingResult","value":"Result<usize, StrSimError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":601,"byte_end":608,"line_start":25,"line_end":25,"column_start":8,"column_end":15},"name":"hamming","qualname":"::hamming","value":"fn (a: &str, b: &str) -> HammingResult","parent":null,"children":[],"decl_id":null,"docs":" Calculates the number of positions in the two strings where the characters\n differ. Returns an error if the strings have different lengths.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1240,"byte_end":1244,"line_start":45,"line_end":45,"column_start":8,"column_end":12},"name":"jaro","qualname":"::jaro","value":"fn (a: &str, b: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculates the Jaro similarity between two strings. The returned value\n is between 0.0 and 1.0 (higher value means more similar).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3524,"byte_end":3540,"line_start":124,"line_end":124,"column_start":8,"column_end":24},"name":"jaro_against_vec","qualname":"::jaro_against_vec","value":"fn (a: &str, v: &[&str]) -> Vec<f64>","parent":null,"children":[],"decl_id":null,"docs":" Calculates the Jaro distance between a string and each string in a vector.\n Returns a vector of corresponding values between 0.0 and 1.0 (higher value\n means more similar).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":24},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3846,"byte_end":3858,"line_start":136,"line_end":136,"column_start":8,"column_end":20},"name":"jaro_winkler","qualname":"::jaro_winkler","value":"fn (a: &str, b: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Like Jaro but gives a boost to strings that have a common prefix.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":26},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5013,"byte_end":5037,"line_start":170,"line_end":170,"column_start":8,"column_end":32},"name":"jaro_winkler_against_vec","qualname":"::jaro_winkler_against_vec","value":"fn (a: &str, v: &[&str]) -> Vec<f64>","parent":null,"children":[],"decl_id":null,"docs":" Calculates the Jaro-Winkler distances between a string and each string\n in a vector. Returns a vector of corresponding values.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5366,"byte_end":5377,"line_start":182,"line_end":182,"column_start":8,"column_end":19},"name":"levenshtein","qualname":"::levenshtein","value":"fn (a: &str, b: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculates the minimum number of insertions, deletions, and substitutions\n required to change one string into the other.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6737,"byte_end":6760,"line_start":224,"line_end":224,"column_start":8,"column_end":31},"name":"levenshtein_against_vec","qualname":"::levenshtein_against_vec","value":"fn (a: &str, v: &[&str]) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Calculates the Levenshtein distance between a string and each string in a\n vector. Returns a vector of corresponding values.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7061,"byte_end":7073,"line_start":236,"line_end":236,"column_start":8,"column_end":20},"name":"osa_distance","qualname":"::osa_distance","value":"fn (a: &str, b: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Like Levenshtein but allows for adjacent transpositions. Each substring can\n only be edited once.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9031,"byte_end":9055,"line_start":293,"line_end":293,"column_start":8,"column_end":32},"name":"osa_distance_against_vec","qualname":"::osa_distance_against_vec","value":"fn (a: &str, v: &[&str]) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Calculates the optimal string alignment distance between a string and each\n string in a vector. Returns a vector of corresponding values.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9399,"byte_end":9418,"line_start":305,"line_end":305,"column_start":8,"column_end":27},"name":"damerau_levenshtein","qualname":"::damerau_levenshtein","value":"fn (a: &str, b: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Like optimal string alignment, but substrings can be edited an unlimited\n number of times, and the triangle inequality holds.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,54,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11603,"byte_end":11634,"line_start":378,"line_end":378,"column_start":8,"column_end":39},"name":"damerau_levenshtein_against_vec","qualname":"::damerau_levenshtein_against_vec","value":"fn (a: &str, v: &[&str]) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Calculates the Damerau-Levenshtein distance between a string and each string\n in a vector. Returns a vector of corresponding values.","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}