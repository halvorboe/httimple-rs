{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"bitreader","disambiguator":[15280334439422867286,13982138797338568102]},"crate_root":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src","external_crates":[{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[2941988461341877381,8472300390439693338]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2153668756788574171,2288043478962111168]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src/lib.rs","num":3,"id":{"name":"alloc","disambiguator":[2071417312717755849,11492198267815760392]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src/lib.rs","num":4,"id":{"name":"std_unicode","disambiguator":[2740323154819872826,1657005047258143774]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[10186673904286688438,2605771987977486664]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[531320120293637297,3994205924220671556]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14853310604380091786,6829468329683660009]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src/lib.rs","num":8,"id":{"name":"compiler_builtins","disambiguator":[9639871989543458626,12742274598358072568]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src/lib.rs","num":9,"id":{"name":"alloc_jemalloc","disambiguator":[2885253331875378562,10684362770611127168]}},{"file_name":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[4215349770068598000,17955886968259767776]}}],"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":334,"byte_end":12515,"line_start":9,"line_end":347,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":334,"byte_end":12515,"line_start":9,"line_end":347,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/halvorboe/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":48},{"krate":0,"index":68},{"krate":0,"index":82},{"krate":0,"index":76},{"krate":0,"index":74},{"krate":0,"index":70},{"krate":0,"index":50},{"krate":0,"index":54},{"krate":0,"index":58},{"krate":0,"index":62},{"krate":0,"index":86},{"krate":0,"index":90},{"krate":0,"index":94},{"krate":0,"index":98},{"krate":0,"index":102},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":114},{"krate":0,"index":64}],"decl_id":null,"docs":" BitReader is a helper type to extract strings of bits from a slice of bytes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2236,"byte_end":2245,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"BitReader","qualname":"::BitReader","value":"BitReader {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":23}],"decl_id":null,"docs":" BitReader reads data from a byte slice at the granularity of a single bit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2571,"byte_end":2574,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<BitReader<'a>>::new","value":"fn (bytes: &'a [u8]) -> BitReader<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3659,"byte_end":3674,"line_start":98,"line_end":98,"column_start":12,"column_end":27},"name":"relative_reader","qualname":"<BitReader<'a>>::relative_reader","value":"fn (&self) -> BitReader<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3900,"byte_end":3907,"line_start":107,"line_end":107,"column_start":12,"column_end":19},"name":"read_u8","qualname":"<BitReader<'a>>::read_u8","value":"fn (&mut self, bit_count: u8) -> Result<u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4099,"byte_end":4107,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"read_u16","qualname":"<BitReader<'a>>::read_u16","value":"fn (&mut self, bit_count: u8) -> Result<u16>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4304,"byte_end":4312,"line_start":119,"line_end":119,"column_start":12,"column_end":20},"name":"read_u32","qualname":"<BitReader<'a>>::read_u32","value":"fn (&mut self, bit_count: u8) -> Result<u32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4513,"byte_end":4521,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"read_u64","qualname":"<BitReader<'a>>::read_u64","value":"fn (&mut self, bit_count: u8) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4762,"byte_end":4769,"line_start":132,"line_end":132,"column_start":12,"column_end":19},"name":"read_i8","qualname":"<BitReader<'a>>::read_i8","value":"fn (&mut self, bit_count: u8) -> Result<i8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5032,"byte_end":5040,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"read_i16","qualname":"<BitReader<'a>>::read_i16","value":"fn (&mut self, bit_count: u8) -> Result<i16>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5308,"byte_end":5316,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"read_i32","qualname":"<BitReader<'a>>::read_i32","value":"fn (&mut self, bit_count: u8) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5588,"byte_end":5596,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"name":"read_i64","qualname":"<BitReader<'a>>::read_i64","value":"fn (&mut self, bit_count: u8) -> Result<i64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5832,"byte_end":5841,"line_start":160,"line_end":160,"column_start":12,"column_end":21},"name":"read_bool","qualname":"<BitReader<'a>>::read_bool","value":"fn (&mut self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6097,"byte_end":6101,"line_start":168,"line_end":168,"column_start":12,"column_end":16},"name":"skip","qualname":"<BitReader<'a>>::skip","value":"fn (&mut self, bit_count: u64) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6625,"byte_end":6633,"line_start":182,"line_end":182,"column_start":12,"column_end":20},"name":"position","qualname":"<BitReader<'a>>::position","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7320,"byte_end":7330,"line_start":196,"line_end":196,"column_start":12,"column_end":22},"name":"is_aligned","qualname":"<BitReader<'a>>::is_aligned","value":"fn (&self, alignment_bytes: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9107,"byte_end":9113,"line_start":246,"line_end":246,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"result::Result<T, BitReaderError>","parent":null,"children":[],"decl_id":null,"docs":" Result type for those BitReader operations that can fail.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":31},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9357,"byte_end":9370,"line_start":252,"line_end":252,"column_start":5,"column_end":18},"name":"NotEnoughData","qualname":"::BitReaderError::NotEnoughData","value":"BitReaderError::NotEnoughData { position, length, requested }","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Requested more bits than there are left in the byte slice at the current position.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":39},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9578,"byte_end":9596,"line_start":259,"line_end":259,"column_start":5,"column_end":23},"name":"TooManyBitsForType","qualname":"::BitReaderError::TooManyBitsForType","value":"BitReaderError::TooManyBitsForType { position, requested, allowed }","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Requested more bits than the returned variable can hold, for example more than 8 bits when\n reading into a u8.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":68},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9245,"byte_end":9259,"line_start":250,"line_end":250,"column_start":10,"column_end":24},"name":"BitReaderError","qualname":"::BitReaderError","value":"BitReaderError::{NotEnoughData, TooManyBitsForType}","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":39}],"decl_id":null,"docs":" Error enumeration of BitReader errors.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9236,"byte_end":9673,"line_start":250,"line_end":264,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11586,"byte_end":11594,"line_start":312,"line_end":312,"column_start":11,"column_end":19},"name":"ReadInto","qualname":"::ReadInto","value":"ReadInto","parent":null,"children":[{"krate":0,"index":60}],"decl_id":null,"docs":" Helper trait to allow reading bits into a variable without explicitly mentioning its type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11626,"byte_end":11630,"line_start":315,"line_end":315,"column_start":8,"column_end":12},"name":"read","qualname":"::ReadInto::read","value":"fn (reader: &mut BitReader, bits: u8) -> Result<Self>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Helper trait to allow reading bits into a variable without explicitly mentioning its type.","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2409,"byte_end":2418,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"kind":"Impl","from":{"krate":0,"index":12},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9690,"byte_end":9704,"line_start":266,"line_end":266,"column_start":16,"column_end":30},"kind":"Impl","from":{"krate":0,"index":68},"to":{"krate":1,"index":2452}},{"span":{"file_name":[47,85,115,101,114,115,47,104,97,108,118,111,114,98,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,114,101,97,100,101,114,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10027,"byte_end":10041,"line_start":275,"line_end":275,"column_start":23,"column_end":37},"kind":"Impl","from":{"krate":0,"index":68},"to":{"krate":2,"index":7246}}]}